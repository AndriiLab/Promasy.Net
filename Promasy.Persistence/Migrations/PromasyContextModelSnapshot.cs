// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Promasy.Persistence.Context;

namespace Promasy.Persistence.Migrations
{
    [DbContext(typeof(PromasyContext))]
    internal class PromasyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("PromasyCore")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy",
                    NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<string>("ClientId")
                    .HasColumnType("text");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Data")
                    .HasColumnType("text");

                b.Property<string>("Description")
                    .HasColumnType("text");

                b.Property<string>("DeviceCode")
                    .HasColumnType("text");

                b.Property<DateTime?>("Expiration")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("SessionId")
                    .HasColumnType("text");

                b.Property<string>("SubjectId")
                    .HasColumnType("text");

                b.Property<string>("UserCode")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("DeviceFlowCodes");
            });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<string>("ClientId")
                    .HasColumnType("text");

                b.Property<DateTime?>("ConsumedTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Data")
                    .HasColumnType("text");

                b.Property<string>("Description")
                    .HasColumnType("text");

                b.Property<DateTime?>("Expiration")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Key")
                    .HasColumnType("text");

                b.Property<string>("SessionId")
                    .HasColumnType("text");

                b.Property<string>("SubjectId")
                    .HasColumnType("text");

                b.Property<string>("Type")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("PersistedGrants");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<int>("RoleId")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<int>("UserId")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("ProviderKey")
                    .HasColumnType("text");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text");

                b.Property<int>("UserId")
                    .HasColumnType("integer");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("integer");

                b.Property<int>("RoleId")
                    .HasColumnType("integer");

                b.Property<string>("Discriminator")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");

                b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("integer");

                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("Promasy.Domain.Bids.AmountUnit", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("ModifierId");

                b.ToTable("AmountUnits");
            });

            modelBuilder.Entity("Promasy.Domain.Bids.Bid", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<int>("Amount")
                    .HasColumnType("integer");

                b.Property<int>("AmountUnitId")
                    .HasColumnType("integer");

                b.Property<string>("CatNum")
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("CpvCode")
                    .HasColumnType("character varying(300)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("character varying(1000)");

                b.Property<int>("FinanceDepartmentId")
                    .HasColumnType("integer");

                b.Property<int?>("Kekv")
                    .HasColumnType("integer");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<decimal>("OnePrice")
                    .HasColumnType("numeric");

                b.Property<DateTime>("ProcurementStartDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ProducerId")
                    .HasColumnType("integer");

                b.Property<int>("ReasonId")
                    .HasColumnType("integer");

                b.Property<int>("SupplierId")
                    .HasColumnType("integer");

                b.Property<string>("Type")
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.HasKey("Id");

                b.HasIndex("AmountUnitId");

                b.HasIndex("CpvCode");

                b.HasIndex("CreatorId");

                b.HasIndex("FinanceDepartmentId");

                b.HasIndex("ModifierId");

                b.HasIndex("ProducerId");

                b.HasIndex("ReasonId");

                b.HasIndex("SupplierId");

                b.ToTable("Bids");
            });

            modelBuilder.Entity("Promasy.Domain.Bids.BidStatus", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<int>("BidId")
                    .HasColumnType("integer");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<string>("Status")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.HasKey("Id");

                b.HasIndex("BidId");

                b.HasIndex("CreatorId");

                b.HasIndex("ModifierId");

                b.ToTable("BidStatuses");
            });

            modelBuilder.Entity("Promasy.Domain.Bids.ReasonForSupplier", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("character varying(1000)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("ModifierId");

                b.ToTable("ReasonForSuppliers");
            });

            modelBuilder.Entity("Promasy.Domain.Finances.FinanceDepartment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<int>("FinanceSourceId")
                    .HasColumnType("integer");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<int>("SubDepartmentId")
                    .HasColumnType("integer");

                b.Property<decimal>("TotalEquipment")
                    .HasColumnType("numeric");

                b.Property<decimal>("TotalMaterials")
                    .HasColumnType("numeric");

                b.Property<decimal>("TotalServices")
                    .HasColumnType("numeric");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("FinanceSourceId");

                b.HasIndex("ModifierId");

                b.HasIndex("SubDepartmentId");

                b.ToTable("FinanceDepartments");
            });

            modelBuilder.Entity("Promasy.Domain.Finances.FinanceSource", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<DateTime>("DueTo")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("FundType")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("Kpkvk")
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnType("character varying(10)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("Number")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<DateTime>("StartsOn")
                    .HasColumnType("timestamp without time zone");

                b.Property<decimal>("TotalEquipment")
                    .HasColumnType("numeric");

                b.Property<decimal>("TotalMaterials")
                    .HasColumnType("numeric");

                b.Property<decimal>("TotalServices")
                    .HasColumnType("numeric");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("ModifierId");

                b.ToTable("FinanceSources");
            });

            modelBuilder.Entity("Promasy.Domain.Institutes.Address", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<string>("BuildingNumber")
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnType("character varying(10)");

                b.Property<string>("City")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("CityType")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("CorpusNumber")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("Country")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<string>("PostalCode")
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnType("character varying(10)");

                b.Property<string>("Region")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("Street")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("StreetType")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("ModifierId");

                b.ToTable("Addresses");
            });

            modelBuilder.Entity("Promasy.Domain.Institutes.Department", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<int>("InstituteId")
                    .HasColumnType("integer");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("InstituteId");

                b.HasIndex("ModifierId");

                b.ToTable("Departments");
            });

            modelBuilder.Entity("Promasy.Domain.Institutes.Institute", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<int>("AddressId")
                    .HasColumnType("integer");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<string>("Edrpou")
                    .HasMaxLength(20)
                    .HasColumnType("character varying(20)");

                b.Property<string>("Email")
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("FaxNumber")
                    .HasMaxLength(30)
                    .HasColumnType("character varying(30)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("PhoneNumber")
                    .HasMaxLength(30)
                    .HasColumnType("character varying(30)");

                b.HasKey("Id");

                b.HasIndex("AddressId");

                b.HasIndex("CreatorId");

                b.HasIndex("ModifierId");

                b.ToTable("Institutes");
            });

            modelBuilder.Entity("Promasy.Domain.Institutes.SubDepartment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<int>("DepartmentId")
                    .HasColumnType("integer");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("DepartmentId");

                b.HasIndex("ModifierId");

                b.ToTable("SubDepartments");
            });

            modelBuilder.Entity("Promasy.Domain.Producers.Producer", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("ModifierId");

                b.ToTable("Producers");
            });

            modelBuilder.Entity("Promasy.Domain.Suppliers.Supplier", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<string>("Comment")
                    .HasMaxLength(1000)
                    .HasColumnType("character varying(1000)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("Phone")
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("ModifierId");

                b.ToTable("Suppliers");
            });

            modelBuilder.Entity("Promasy.Domain.Users.Employee", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("CreatorId")
                    .HasColumnType("integer");

                b.Property<bool>("Deleted")
                    .HasColumnType("boolean");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("MiddleName")
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("timestamp without time zone");

                b.Property<int?>("ModifierId")
                    .HasColumnType("integer");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("PhoneReserve")
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<int>("SubDepartmentId")
                    .HasColumnType("integer");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("UserName")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.HasKey("Id");

                b.HasIndex("CreatorId");

                b.HasIndex("ModifierId");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex");

                b.HasIndex("SubDepartmentId");

                b.ToTable("Employees");
            });

            modelBuilder.Entity("Promasy.Domain.Users.Role", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex");

                b.ToTable("Roles");
            });

            modelBuilder.Entity("Promasy.Domain.Vocabulary.Cpv", b =>
            {
                b.Property<string>("CpvCode")
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)");

                b.Property<string>("CpvEng")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("character varying(1000)");

                b.Property<int>("CpvLevel")
                    .HasColumnType("integer");

                b.Property<string>("CpvUkr")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("character varying(1000)");

                b.Property<bool>("Terminal")
                    .HasColumnType("boolean");

                b.HasKey("CpvCode");

                b.ToTable("Cpvs");
            });

            modelBuilder.Entity("Promasy.Domain.Users.EmployeeRole", b =>
            {
                b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                b.Property<int?>("EmployeeId")
                    .HasColumnType("integer");

                b.Property<int?>("RoleId1")
                    .HasColumnType("integer");

                b.HasIndex("EmployeeId");

                b.HasIndex("RoleId1");

                b.HasDiscriminator().HasValue("EmployeeRole");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.HasOne("Promasy.Domain.Users.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.HasOne("Promasy.Domain.Users.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Promasy.Domain.Users.Employee", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Promasy.Domain.Bids.AmountUnit", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.Navigation("Creator");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Bids.Bid", b =>
            {
                b.HasOne("Promasy.Domain.Bids.AmountUnit", "AmountUnit")
                    .WithMany()
                    .HasForeignKey("AmountUnitId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Promasy.Domain.Vocabulary.Cpv", "Cpv")
                    .WithMany()
                    .HasForeignKey("CpvCode");

                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Finances.FinanceDepartment", "FinanceDepartment")
                    .WithMany("Bids")
                    .HasForeignKey("FinanceDepartmentId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.HasOne("Promasy.Domain.Producers.Producer", "Producer")
                    .WithMany()
                    .HasForeignKey("ProducerId");

                b.HasOne("Promasy.Domain.Bids.ReasonForSupplier", "Reason")
                    .WithMany()
                    .HasForeignKey("ReasonId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Promasy.Domain.Suppliers.Supplier", "Supplier")
                    .WithMany()
                    .HasForeignKey("SupplierId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("AmountUnit");

                b.Navigation("Cpv");

                b.Navigation("Creator");

                b.Navigation("FinanceDepartment");

                b.Navigation("Modifier");

                b.Navigation("Producer");

                b.Navigation("Reason");

                b.Navigation("Supplier");
            });

            modelBuilder.Entity("Promasy.Domain.Bids.BidStatus", b =>
            {
                b.HasOne("Promasy.Domain.Bids.Bid", "Bid")
                    .WithMany("BidStatuses")
                    .HasForeignKey("BidId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.Navigation("Bid");

                b.Navigation("Creator");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Bids.ReasonForSupplier", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.Navigation("Creator");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Finances.FinanceDepartment", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Finances.FinanceSource", "FinanceSource")
                    .WithMany("FinanceDepartments")
                    .HasForeignKey("FinanceSourceId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.HasOne("Promasy.Domain.Institutes.SubDepartment", "SubDepartment")
                    .WithMany("FinanceDepartments")
                    .HasForeignKey("SubDepartmentId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Creator");

                b.Navigation("FinanceSource");

                b.Navigation("Modifier");

                b.Navigation("SubDepartment");
            });

            modelBuilder.Entity("Promasy.Domain.Finances.FinanceSource", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.Navigation("Creator");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Institutes.Address", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.Navigation("Creator");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Institutes.Department", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Institutes.Institute", "Institute")
                    .WithMany("Departments")
                    .HasForeignKey("InstituteId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.Navigation("Creator");

                b.Navigation("Institute");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Institutes.Institute", b =>
            {
                b.HasOne("Promasy.Domain.Institutes.Address", "Address")
                    .WithMany()
                    .HasForeignKey("AddressId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.Navigation("Address");

                b.Navigation("Creator");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Institutes.SubDepartment", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.SetNull);

                b.HasOne("Promasy.Domain.Institutes.Department", "Department")
                    .WithMany("SubDepartments")
                    .HasForeignKey("DepartmentId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId")
                    .OnDelete(DeleteBehavior.SetNull);

                b.Navigation("Creator");

                b.Navigation("Department");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Producers.Producer", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.Navigation("Creator");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Suppliers.Supplier", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId");

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId");

                b.Navigation("Creator");

                b.Navigation("Modifier");
            });

            modelBuilder.Entity("Promasy.Domain.Users.Employee", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", "Creator")
                    .WithMany()
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.SetNull);

                b.HasOne("Promasy.Domain.Users.Employee", "Modifier")
                    .WithMany()
                    .HasForeignKey("ModifierId")
                    .OnDelete(DeleteBehavior.SetNull);

                b.HasOne("Promasy.Domain.Institutes.SubDepartment", "SubDepartment")
                    .WithMany("Employees")
                    .HasForeignKey("SubDepartmentId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Creator");

                b.Navigation("Modifier");

                b.Navigation("SubDepartment");
            });

            modelBuilder.Entity("Promasy.Domain.Users.EmployeeRole", b =>
            {
                b.HasOne("Promasy.Domain.Users.Employee", null)
                    .WithMany("Roles")
                    .HasForeignKey("EmployeeId");

                b.HasOne("Promasy.Domain.Users.Role", null)
                    .WithMany("Employees")
                    .HasForeignKey("RoleId1");
            });

            modelBuilder.Entity("Promasy.Domain.Bids.Bid", b => { b.Navigation("BidStatuses"); });

            modelBuilder.Entity("Promasy.Domain.Finances.FinanceDepartment",
                b => { b.Navigation("Bids"); });

            modelBuilder.Entity("Promasy.Domain.Finances.FinanceSource",
                b => { b.Navigation("FinanceDepartments"); });

            modelBuilder.Entity("Promasy.Domain.Institutes.Department",
                b => { b.Navigation("SubDepartments"); });

            modelBuilder.Entity("Promasy.Domain.Institutes.Institute",
                b => { b.Navigation("Departments"); });

            modelBuilder.Entity("Promasy.Domain.Institutes.SubDepartment", b =>
            {
                b.Navigation("Employees");

                b.Navigation("FinanceDepartments");
            });

            modelBuilder.Entity("Promasy.Domain.Users.Employee", b => { b.Navigation("Roles"); });

            modelBuilder.Entity("Promasy.Domain.Users.Role", b => { b.Navigation("Employees"); });
#pragma warning restore 612, 618
        }
    }
}